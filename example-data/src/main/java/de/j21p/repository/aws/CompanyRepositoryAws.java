package de.j21p.repository.aws;

import de.j21p.model.Company;
import de.j21p.model.aws.CompanyAws;
import de.j21p.repository.CompanyRepository;
import de.j21p.util.ValidationUtil;
import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClient;
import software.amazon.awssdk.enhanced.dynamodb.DynamoDbTable;
import software.amazon.awssdk.enhanced.dynamodb.Key;
import software.amazon.awssdk.enhanced.dynamodb.TableSchema;
import software.amazon.awssdk.enhanced.dynamodb.extensions.AutoGeneratedTimestampRecordExtension;
import software.amazon.awssdk.enhanced.dynamodb.internal.client.ExtensionResolver;

import java.util.UUID;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import static de.j21p.util.ValidationUtil.checkAttribute;

public class CompanyRepositoryAws implements CompanyRepository {

  static final TableSchema<CompanyAws> COMPANY_TABLE_SCHEMA =
      TableSchema.fromClass(CompanyAws.class);

  DynamoDbEnhancedClient enhancedClient;
  DynamoDbTable<CompanyAws> mappedTable;

  public CompanyRepositoryAws(String region) {
    this.enhancedClient =
        DynamoDbEnhancedClient.builder()
            .dynamoDbClient(DynamoDBClientHandler.getInstance(region))
            .extensions(
                Stream.concat(
                        ExtensionResolver.defaultExtensions().stream(),
                        Stream.of(AutoGeneratedTimestampRecordExtension.create()))
                    .collect(Collectors.toList()))
            .build();
    generateMappedTable();
  }

  private void generateMappedTable() {
    String tableName = "";
    try {
      tableName = "quarkus-example-filter-company-table";
    } catch (Exception e) {
      e.printStackTrace();
    }
    this.mappedTable = enhancedClient.table(tableName, COMPANY_TABLE_SCHEMA);
  }

  public Company findByID(String id) {
    Key key = Key.builder().partitionValue(id).build();
    return this.mappedTable.getItem(r -> r.key(key));
  }

  @Override
  public Company put(Company company) throws ValidationUtil.ValidationException {
    if (company.getId() == null || company.getId().isBlank()) {
      company.setId(UUID.randomUUID().toString());
    }

    checkAttribute("id", company.getId(), true);
    checkAttribute("address", company.getAddress(), true);
    checkAttribute("name", company.getName(), true);
    checkAttribute("type", company.getType());

    return this.mappedTable.updateItem((CompanyAws) company);
  }

  @Override
  public Company createCompany() {
    return new CompanyAws();
  }

  @Override
  public Company delete(String id) {
    Key key = Key.builder().partitionValue(id).build();
    return this.mappedTable.deleteItem(r -> r.key(key));
  }
}
